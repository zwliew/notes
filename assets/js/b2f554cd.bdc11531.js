"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/06/09/cs2106-review","metadata":{"permalink":"/blog/2022/06/09/cs2106-review","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-09-cs2106-review.md","source":"@site/blog/2022-06-09-cs2106-review.md","title":"CS2106 Introduction to Operating Systems review","description":"Taken in AY21/22 Sem 2 under Profs Djordje Jevdjic and Colin Tan.","date":"2022-06-09T00:00:00.000Z","formattedDate":"June 9, 2022","tags":[],"readingTime":1.935,"truncated":false,"authors":[],"frontMatter":{},"nextItem":{"title":"CS2030S Programming Methodology II review","permalink":"/blog/2022/06/08/cs2030s-review"}},"content":"Taken in AY21/22 Sem 2 under Profs Djordje Jevdjic and Colin Tan.\\n\\n## Relevant links\\n[Helpful cheatsheet](https://bernardteo.me/nus/CS2106%20Reference.pdf)\\n\\n## Summary\\nThe content was useful but superficial. The labs were uninteresting. The module is somewhat difficult but that\'s mainly because of the amount of content taught and the lack of association with real-world examples. The workload was highly manageable and less than CS2040S, CS2030S, and CS2100.\\n\\n## Topics\\nProcesses and threads, process scheduling, inter-process communication, synchronization, memory management (including virtual memory) and file systems. Most concepts were taught in relation to how Unix works such as Unix syscalls. Specific file system case studies include ext2 and FAT.\\n\\n## Content\\nLike CS2100, CS2106 is a \\"content\\" module where quite a lot of content is taught and the bulk of the work lies in understanding it.\\n\\nI was disappointed at how abstract most of the topics taught were. The professors could\'ve brought in examples of real-world implementations of the topics, such as those in the Linux kernel.\\n\\n## Professors\\nThe professors\' teaching didn\'t leave much of an impression on me. They explain concepts well and it was enjoyable listening to their lectures.\\n\\nThat said, there were some gaps in teaching. To fill in those gaps, I had to conduct self-research on some topics and ask questions on the forum. There were also weekly office hours for students to consult the professors.\\n\\n## Workload\\n- a 2-hour lecture per week. Does not contribute to grades.\\n- a 1-hour tutorial per week. Does not contribute to grades.\\n- a graded quiz every week. Takes about 10 minutes on average to complete.\\n- 4 graded lab assignments spread over the course of the semester.\\n- a 2-hour midterm\\n- a 2-hour final\\n\\nThe lecture slides were incomplete and were not understandable alone so I had to watch all the lectures. The tutorials were not strictly necessary for doing well, but they helped reinforce concepts and teach techniques to answer questions.\\n\\nThe labs required us to implement programs that demonstrated OS concepts. We were given around 2 weeks to complete each lab, which was usually more than enough time. I found the labs disappointing. They could\'ve been designed to be more insightful, such as by letting us implement simple OS subsystems.\\n\\n## Ratings\\nEnjoyment: 5/10\\n\\nDifficulty: 7/10\\n\\nWorkload: 5/10\\n\\nImportance/Usefulness for a CS grad: 9/10"},{"id":"/2022/06/08/cs2030s-review","metadata":{"permalink":"/blog/2022/06/08/cs2030s-review","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-08-cs2030s-review.md","source":"@site/blog/2022-06-08-cs2030s-review.md","title":"CS2030S Programming Methodology II review","description":"Taken in AY21/22 Sem 2 under Profs Boyd Anderson and Ooi Wei Tsang.","date":"2022-06-08T00:00:00.000Z","formattedDate":"June 8, 2022","tags":[],"readingTime":1.36,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"CS2106 Introduction to Operating Systems review","permalink":"/blog/2022/06/09/cs2106-review"},"nextItem":{"title":"CS2040S Data Structures and Algorithms review","permalink":"/blog/2022/06/07/cs2040s-review"}},"content":"Taken in AY21/22 Sem 2 under Profs Boyd Anderson and Ooi Wei Tsang.\\n\\n[Link to course website](https://nus-cs2030s.github.io/2122-s2/)\\n\\n## Summary\\nThe content was interesting, but the lectures and recitations were pretty boring. The lab assignments were mostly a chore, and programming in Java is a huge pain. The workload was comparable to CS2040S (probably less).\\n\\n## Topics\\nObject-oriented programming, type systems, functional programming, concurrent and parallel programming.\\n\\n## Content\\nThis module was mainly about introducing several concepts in programming, each to a fairly superficial level. It was pretty interesting learning all these, but the lack of depth made it less enjoyable.\\n\\n## Professors\\nI didn\'t enjoy watching their lectures and ended up solely relying on the lecture notes and the Q&A forums. This is mostly because the lectures didn\'t really teach anything useful outside of the well-written lecture notes.\\n\\n## Workload\\n- a 2-hour lecture every week. Ungraded.\\n- a 1-hour recitation every week. Ungraded.\\n- a 2-hour lab every week. The lab session can be skipped, but the take-home lab assignments are graded.\\n- a MCQ quiz after every lecture. Graded and took <10 min each.\\n- 2 2-hour practical exams. Involved implementing programs according to given specifications.\\n- a 2-hour midterm. MCQ and short answer questions.\\n- a 2-hour final. MCQ and short answer questions.\\n\\nThe lab assignments make up the bulk of the workload. They start simple, but progressively ramp up in difficulty. The last few assignments were pretty difficult and could take a day or so to complete. Programming in Java was not enjoyable either.\\n\\n## Ratings\\n\\nEnjoyment: 4/10\\n\\nDifficulty: 5/10\\n\\nWorkload: 7/10\\n\\nImportance/usefulness to a CS grad: 9/10"},{"id":"/2022/06/07/cs2040s-review","metadata":{"permalink":"/blog/2022/06/07/cs2040s-review","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-07-cs2040s-review.md","source":"@site/blog/2022-06-07-cs2040s-review.md","title":"CS2040S Data Structures and Algorithms review","description":"Taken in AY21/22 Sem 2 under Prof Seth Gilbert.","date":"2022-06-07T00:00:00.000Z","formattedDate":"June 7, 2022","tags":[],"readingTime":2.145,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"CS2030S Programming Methodology II review","permalink":"/blog/2022/06/08/cs2030s-review"},"nextItem":{"title":"CS2100 Computer Organisation review","permalink":"/blog/2022/06/06/cs2100-review"}},"content":"Taken in AY21/22 Sem 2 under Prof Seth Gilbert.\\n\\n## Relevant links\\n\\nLecture recordings:\\n- [AY 21/22 Sem 2](https://www.youtube.com/playlist?list=PLksmtI4lnGNkH1jyXMhS96Nmg-e3gzkyw)\\n- [AY20/21](https://www.youtube.com/playlist?list=PLgpwqdiEMkHA0pU_uspC6N88RwMpt9rC8)\\n\\nIf you\'d like more study materials (i.e. problemsets and lecture notes), check out the following 6.006 course materials on MIT OCW:\\n- [Spring 2020 iteration](https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2020/)\\n- [Fall 2011 iteration](https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-fall-2011/)\\n\\n## Summary\\nThe content was interesting and the last few questions of each tutorial were usually interesting. The lack of proofs was somewhat disappointing. The workload was quite high due to the many problemsets and the infuriating grader platform. I spent more time on this module than CS2100 and CS2106, but less time compared to CS2030S.\\n\\n## Topics\\nOrders of growth, sorting, balanced binary search trees, various other trees, hash tables, simple amortized analysis, graph searching algorithms, shortest path algorithms, topological sorts, minimum spanning trees, heaps, union find data structure, dynamic programming.\\n\\n## Content\\nWhile there may seem like a lot of content, much of it is intuitive and can be derived from a few core definitions and invariants. Having a solid grounding in discrete math, especially proofs and combinatorics, helps.\\n\\nI was a bit disappointed at the lack of (rigorous) proofs for many of the claims taught, especially those involving randomization or probability.\\n\\n## Professors\\nProf Seth is an enthusiastic and competent teacher. I enjoyed his teaching and highly recommend taking classes under him.\\n\\n## Workload\\n- a 1-hour and a 2-hour lecture per week. Negligible EXP given as EXP.\\n- a 2-hour tutorial every week. Level of participation is counted as EXP.\\n- a 1-hour recitation every week. Negligible EXP given.\\n- a quiz after every lecture. EXP is awarded.\\n- a problemset after every 1-2 lectures. EXP is awarded.\\n- some optional coding practices to farm EXP if you need more.\\n- a 2-hour midterm\\n- a 2-hour final\\n\\nSome percentage of our grades goes to a gamified learning system on Coursemology where we have to gain EXP to level up. The max level is level 35, which most people should obtain if they are diligent with assignments.\\n\\nThe lecture slides were highly understandable which is great if you don\'t want to watch the lectures.\\n\\nThe last few questions of every tutorial were quite insightful and enjoyable to tackle.\\n\\nThe problemsets took up a lot of time. What\'s more infuriating is that Coursemology, the grader platform, does not provide meaningful error messages so esoteric bugs are much harder to catch (i.e. using an unsupported Java feature or using an incompatible character set).\\n\\n## Ratings\\n\\nEnjoyment: 8/10\\n\\nDifficulty: 5/10\\n\\nWorkload: 8/10\\n\\nImportance/usefulness to a CS grad: 10/10"},{"id":"/2022/06/06/cs2100-review","metadata":{"permalink":"/blog/2022/06/06/cs2100-review","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-06-cs2100-review.md","source":"@site/blog/2022-06-06-cs2100-review.md","title":"CS2100 Computer Organisation review","description":"Taken in AY21/22 Sem 1 under Profs Colin Tan Keng Yan and Aaron Tan Tuck Choy.","date":"2022-06-06T00:00:00.000Z","formattedDate":"June 6, 2022","tags":[],"readingTime":1.265,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"CS2040S Data Structures and Algorithms review","permalink":"/blog/2022/06/07/cs2040s-review"},"nextItem":{"title":"CS1231S Discrete Structures review","permalink":"/blog/2022/06/05/cs1231s-review"}},"content":"Taken in AY21/22 Sem 1 under Profs Colin Tan Keng Yan and Aaron Tan Tuck Choy.\\n\\n[Link to course website](https://www.comp.nus.edu.sg/~cs2100/)\\n\\n## Description\\nThis module teaches us about how CPUs and memory work. Topics taught include the C language, the MIPS architecture, processor datapath and control, boolean algebra, logic circuits, pipelining and caching. Performance is included but is not examinable.\\n\\n## Professors\\nBoth professors are highly enthusiastic and I enjoy attending their lectures. However, for efficiency, I mostly read the slides or watch the recordings instead of attending live lectures.\\n\\n## Content\\nThere is a decently large amount of content, but they are mostly conceptually mangeable. Personally, I would\'ve liked some of the time spent on C to be spent on other content. The main difficulty of the content lies in that there are a lot of tedious calculations. One must be fast and accurate when doing them.\\n\\n## Workload\\nBesides midterms and finals, there are 3 graded assignments, weekly tutorials, and weekly labs. Tutorials are not graded but attendance is taken. For labs, students are required to complete a 1-2 page worksheet. Labs are graded and attendance is taken. Overall, I find the workload pretty light. That said, it depends on how quickly one is able to grasp the concepts and do the labs and assignments.\\n\\n## Conclusion\\n9/10. This module is vital for any CS student -- especially for one interested in low-latency/concurrent programming. It is also taught by two excellent professors. I enjoyed this module, and am looking forward to CS2106."},{"id":"/2022/06/05/cs1231s-review","metadata":{"permalink":"/blog/2022/06/05/cs1231s-review","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-05-cs1231s-review.md","source":"@site/blog/2022-06-05-cs1231s-review.md","title":"CS1231S Discrete Structures review","description":"Taken in AY21/22 Sem 1 under Profs Aaron Tan Tuck Choy and Lawrence Wong Tin Lok.","date":"2022-06-05T00:00:00.000Z","formattedDate":"June 5, 2022","tags":[],"readingTime":1.185,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"CS2100 Computer Organisation review","permalink":"/blog/2022/06/06/cs2100-review"},"nextItem":{"title":"Self-studying the NUS CS Y1 curriculum","permalink":"/blog/2022/05/23/self-studying-nus-cs-year-one"}},"content":"Taken in AY21/22 Sem 1 under Profs Aaron Tan Tuck Choy and Lawrence Wong Tin Lok.\\n\\n[Link to course website](https://www.comp.nus.edu.sg/~cs1231s/1_module_info/sched.html)\\n\\n## Description\\nThis module teaches discrete mathematics. Topics include logic and proofs, sets, relations, mathematical induction, functions, cardinality, counting and probability, and graph theory. Unfortunately, number theory is replaced by cardinality, which is a decision I personally dislike.\\n\\n## Professors\\nProf Aaron is highly enthusiastic and I enjoy attending his lectures. Prof Lawrence is also competent. However, for efficiency, I mostly read the slides or watch the recordings instead of attending live lectures.\\n\\n## Content\\nThere is not a lot of content, especially when compared to CS2100. Furthermore, I feel like graph theory is taught too superficially. That said, the difficulty of the content comes from the need for intuition and a strong understanding of the definitions that are taught. Also, I would\'ve preferred to learn number theory instead of cardinality, though having both would be the best.\\n\\n## Workload\\nBesides midterms and finals, there are 2 graded assignments and weekly tutorials. Tutorials are not graded but attendance is taken. Overall, I find the workload pretty light, especially when compared to CS2100. That said, it depends on how quickly one is able to grasp the concepts and do the assignments.\\n\\n## Conclusion\\n8/10. This module is vital for any CS student. I thoroughly enjoyed it. That being said, to maximise learning, I would consider taking MA1100/T instead."},{"id":"/2022/05/23/self-studying-nus-cs-year-one","metadata":{"permalink":"/blog/2022/05/23/self-studying-nus-cs-year-one","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-05-23-self-studying-nus-cs-year-one.md","source":"@site/blog/2022-05-23-self-studying-nus-cs-year-one.md","title":"Self-studying the NUS CS Y1 curriculum","description":"In the National University of Singapore (NUS), freshmen who are studying computer science (CS) typically study the following courses:","date":"2022-05-23T00:00:00.000Z","formattedDate":"May 23, 2022","tags":[],"readingTime":4.93,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"CS1231S Discrete Structures review","permalink":"/blog/2022/06/05/cs1231s-review"}},"content":"In the National University of Singapore (NUS), freshmen who are studying computer science (CS) typically study the following courses:\\n\\n1. CS1101S (Programming Methodology)\\n2. CS1231S (Discrete Structures)\\n3. CS2030S (Programming Methodology II)\\n4. CS2040S (Data Structures & Algorithms)\\n5. CS2100 (Computer Organisation)\\n6. CS2106 (Introduction to Operating Systems)\\n\\nMost of these can be self-studied without ever enrolling in an official CS programme. Here\'s how.\\n\\n## CS1101S (Programming Methodology)\\n\\nCS1101S is the introductory CS course that most freshmen take, except for those who place out of it. I am part of the latter group, so I do not have first-hand experience of this course. Therefore, what I know is second-hand information from my coursemates.\\n\\nCS1101S is largely based on the the book [Structure and Interpretation of Computer Programs](https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html). It teaches functional programming through the language Source, which is best described as a subset of JavaScript. The course workload is grueling, but at least you have some fun working in the gamified programming environment called SourceAcademy.\\n\\nI don\'t know of any free resource or course that replaces directly CS1101S. However -- take it from someone who placed out of the course and got through Y1 just fine -- any well-known introductory CS course should suffice. Ultimately, most introductory CS courses teach computational thinking and basic programming skills. This course is no exception.\\n\\nSo, here are some courses which I think should sufficiently replace this course:\\n\\n1. [Introduction to Computer Science and Programming in Python (MIT\'s 6.0001)](https://ocw.mit.edu/courses/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/)\\n2. [Introduction to Computer Science (Harvard\'s CS50x)](https://cs50.harvard.edu/x/2022/)\\n\\n## CS1231S (Discrete Structures)\\n\\nCS1231S is your run-of-the-mill discrete mathematics course, which covers a hodgepodge of topics involving \\"discrete\\" objects. It covers topics including logic and proofs, set theory, relations, mathematical induction, functions, cardinality, combinatorics and probability, and graph theory. Some discrete mathematics courses include other topics like number theory.\\n\\nAs mentioned in [Teach Yourself Computer Science](https://teachyourselfcs.com/#math), the course I most recommend for studying this course is [Mathematics for Computer Science (MIT\'s 6.024J)](https://ocw.mit.edu/courses/6-042j-mathematics-for-computer-science-fall-2010/). Notably, I recommend the Fall 2010 revision over the 2015 revision as Prof Tom Leighton taught the former, and I greatly appreciate his teaching.\\n\\nThe course is accompanied by an equivalently-named textbook (linked in the course site). I recommend reading through the textbook chapter by chapter as it helps to internalise the content. In fact, in my opinion, reading the textbook and completing the problem sets is sufficient. Watch the lectures only if you have the time or you learn better with them.\\n\\n## CS2040S (Data Structures and Algorithms)\\n\\nCS2040S is another run-of-the-mill data structures and algorithms course. It covers topics including orders of growth, sorting, balanced binary search trees, various other trees, hash tables, simple amortized analysis, graph searching algorithms, shortest path algorithms, topological sorts, minimum spanning trees, heaps, union find data structure, and simple dynamic programming.\\n\\nI recommend studying [Introduction to Algorithms (MIT 6.006)](https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-fall-2011/). The resemblance between CS2040S and 6.006 is uncanny, from the types of topics covered to the order in which they are covered.\\n\\nAs before, I strongly recommend reading the relevant chapters of the accompanying textbook [Introduction to Algorithms (CLRS, 3 ed)](https://mitpress.mit.edu/books/introduction-algorithms-third-edition) and attempting the textbook exercises and course problem sets. The lectures are optional and serve to provide a slightly different persepective.\\n\\n## CS2030S (Programming Methodology II)\\n\\nCS2030S covers a hodgepodge of topics including object-oriented programming, functional programming, concurrent and parallel programming, and simple type systems. \\n\\nAt the moment, I am not sure of a good replacement for this course. That said, the well-written course notes are [online for self-study](https://nus-cs2030s.github.io/2122-s2/). Much of the course can be self-studied by reading the notes and doing coding practices. Unfortunately, I don\'t know of any available coding practices at the moment.\\n\\n## CS2100 (Computer Organisation)\\n\\nCS2100 covers how simple CPUs work. Topics include the C language, the MIPS architecture, processor datapath and control, boolean algebra, logic circuits, pipelining, caching, and performance analysis.\\n\\nAt the moment, I am not sure of a good replacement for this course. While there are several supplementary reference textbooks used in the course, I have not read them enough to recommend them. That said, online cheatsheets like [Bernard\'s](https://bernardteo.me/nus/CS2100%20Reference.pdf) provides a decent overview of the course material.\\n\\n## CS2106 (Introduction to Operating Systems)\\n\\nCS2106 introduces main concepts in operating systems (OS) including processes and threads, process scheduling, inter-process communication (IPC), synchronization, memory management and virtual memory, and file systems. Most concepts are taught in relation to Unix. File system case studies include ext2 and FAT.\\n\\nTo self-study OSes, I strongly recommend [Operating System Engineering (MIT 6.S081)](https://pdos.csail.mit.edu/6.S081/2021/index.html). It is a much more complete introduction to OSes that revolves around a simpler Unix-based kernel called xv6. The labs are much more interesting as they require students to get down to the nitty-gritty of writing modifications to the xv6 kernel, rather than merely writing code that uses kernel syscalls and abstractions. Furthermore, the course covers additional topics like networking, RCU, and virtualization. The tradeoff of this completeness is that the course workload feels much heavier than CS2106\'s.\\n\\nThe course is accompanied by an xv6 handbook (linked in the course site) which provides a written explanation of the kernel. I recommend reading through the lecture slides and handbook, and working on the lab assignments following the schedule that is posted on the course site. The lecture videos are also helpful as they expand on the points in the lecture slides and handouts.\\n\\n## Conclusion and looking to Y2\\n\\nThat concludes the CS freshmen courses at NUS. In year 2 (sophomore), I hope to look into ways to self-study courses including:\\n\\n- CS2103T (Software Engineering)\\n- CS2104 (Programming Language Concepts)\\n- CS2105 (Introduction to Computer Networks)\\n- CS2109S (Introduction to AI and Machine Learning)\\n- CS3210 (Parallel Computing)\\n- CS3211 (Parallel and Concurrent Programming)\\n- CS3230 (Design and Analysis of Algorithms)\\n- CS4215 (Programming Language Implementation)\\n\\nBesides computer science, I hope to look into courses from other disciplines like mathematics, physics, statistics, and even philosophy! With that, see you in Y2 \ud83d\ude0a"}]}')}}]);