"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5903],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),f=i,g=m["".concat(s,".").concat(f)]||m[f]||u[f]||a;return r?n.createElement(g,o(o({ref:t},p),{},{components:r})):n.createElement(g,o({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6566:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var n=r(7462),i=r(3366),a=(r(7294),r(3905)),o=["components"],l={sidebar_position:2},s="GCC",c={unversionedId:"gcc",id:"gcc",title:"GCC",description:"https://gcc.gnu.org/",source:"@site/docs/gcc.md",sourceDirName:".",slug:"/gcc",permalink:"/docs/gcc",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gcc.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"CTF",permalink:"/docs/ctf"},next:{title:"Programming languages",permalink:"/docs/proglang"}},p={},u=[{value:"Useful resources for new contributors",id:"useful-resources-for-new-contributors",level:2},{value:"Communication",id:"communication",level:2},{value:"Working with GIMPLE/GENERIC trees",id:"working-with-gimplegeneric-trees",level:2},{value:"Possible performance optimizations for std::string_view::find_first_of and friends",id:"possible-performance-optimizations-for-stdstring_viewfind_first_of-and-friends",level:2}],m={toc:u};function f(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gcc"},"GCC"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://gcc.gnu.org/"},"https://gcc.gnu.org/")),(0,a.kt)("h2",{id:"useful-resources-for-new-contributors"},"Useful resources for new contributors"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://dmalcolm.fedorapeople.org/gcc/newbies-guide/"},"David Malcolm's contributors guide")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gcc.gnu.org/onlinedocs/"},"GCC Manual"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Mainly for reference")))),(0,a.kt)("h2",{id:"communication"},"Communication"),(0,a.kt)("p",null,"GCC communicates through ",(0,a.kt)("a",{parentName:"p",href:"https://gcc.gnu.org/lists.html"},"mailing lists"),". The most important ones are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gcc.gnu.org/pipermail/gcc-patches/"},"gcc-patches")," for discussions surrounding patches"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gcc.gnu.org/pipermail/gcc-help/"},"gcc-help")," for help regarding building or using GCC"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gcc.gnu.org/pipermail/gcc/"},"gcc")," for anything else GCC-related (anything goes, kinda!)")),(0,a.kt)("h2",{id:"working-with-gimplegeneric-trees"},"Working with GIMPLE/GENERIC trees"),(0,a.kt)("p",null,"As a result of expressions being in ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Static_single_assignment_form"},"SSA"),', the operands of an operator are assumed to have the same type.\nViolating this causes wrong code or "internal compilation error"!'),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/gcc-mirror/gcc/blob/master/gcc/match.pd"},"match.pd")," is a specification file for tree patterns that can be optimized:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Thousands of lines long"),(0,a.kt)("li",{parentName:"ul"},"Written in a DSL inspired by Lisp"),(0,a.kt)("li",{parentName:"ul"},"Applicable to both GIMPLE and GENERIC trees"),(0,a.kt)("li",{parentName:"ul"},"Compiled into a giant C++ file containing each pattern on every change (takes ~30 min!)")),(0,a.kt)("h2",{id:"possible-performance-optimizations-for-stdstring_viewfind_first_of-and-friends"},"Possible performance optimizations for std::string_view::find_first_of and friends"),(0,a.kt)("p",null,"Relevant links:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/70433152/missed-optimization-with-string-viewfind-first-of"},"https://stackoverflow.com/questions/70433152/missed-optimization-with-string-viewfind-first-of")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://sourceware.org/pipermail/libc-alpha/2022-January/135013.html"},"https://sourceware.org/pipermail/libc-alpha/2022-January/135013.html"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view::find_first_of")," compiles to ",(0,a.kt)("inlineCode",{parentName:"p"},"sv.size()")," calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"memchr"),'. This is highly inefficient in most cases, where the number of "needles" are small and the "haystack" is large.'),(0,a.kt)("p",null,"Possible optimizations:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Transform ",(0,a.kt)("inlineCode",{parentName:"li"},"std::string_view::find_first_of(small_str)")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"__builtin_mempbrk(sv.data(), small_str, small_str.size())"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This requires adding an optimized ",(0,a.kt)("inlineCode",{parentName:"li"},"mempbrk()")," function to GCC or libc.")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Transform ",(0,a.kt)("inlineCode",{parentName:"li"},"__builtin_memchr(small_str, chr, small_str.size())")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"if (chr == small_str[0] || chr == small_str[1] || ... || chr == small_str[small_str.size() - 1])"))))}f.isMDXComponent=!0}}]);